name: Build Custom PostgreSQL Docker Image

on:
  # GitÊèê‰∫§Ëß¶ÂèëÊûÑÂª∫ (Âü∫‰∫éÊèê‰∫§Ê∂àÊÅØÂèÇÊï∞)
  push:
    branches: [ main, master ]

  # ÊâãÂä®Ëß¶ÂèëÊûÑÂª∫
  workflow_dispatch:
    inputs:
      postgres_version:
        description: 'PostgreSQL version to build'
        required: true
        default: '15'
        type: choice
        options:
          - '15'
          - '16'
          - 'both'
      tag_suffix:
        description: 'Additional tag suffix'
        required: false
        default: ''
      force_rebuild:
        description: 'Force rebuild without cache'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/postgres-custom

jobs:
  parse-commit:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      postgres_version: ${{ steps.check.outputs.postgres_version }}
      force_rebuild: ${{ steps.check.outputs.force_rebuild }}
      tag_suffix: ${{ steps.check.outputs.tag_suffix }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Parse commit message for build parameters
      id: check
      run: |
        # Ëé∑ÂèñÊèê‰∫§Ê∂àÊÅØ
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # ÊâãÂä®Ëß¶ÂèëÊó∂‰ΩøÁî®ËæìÂÖ•ÂèÇÊï∞
          echo "should_build=true" >> $GITHUB_OUTPUT
          echo "postgres_version=${{ github.event.inputs.postgres_version }}" >> $GITHUB_OUTPUT
          echo "force_rebuild=${{ github.event.inputs.force_rebuild }}" >> $GITHUB_OUTPUT
          echo "tag_suffix=${{ github.event.inputs.tag_suffix }}" >> $GITHUB_OUTPUT
          echo "üìã Manual trigger detected with parameters"
        else
          # GitÊèê‰∫§Êó∂Ëß£ÊûêÊèê‰∫§Ê∂àÊÅØ
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "üîç Analyzing commit message: $COMMIT_MSG"

          # ÈªòËÆ§ÂÄº
          SHOULD_BUILD="false"
          PG_VERSION="15"
          FORCE_REBUILD="false"
          TAG_SUFFIX=""

          # Ê£ÄÊü•ÊòØÂê¶ÂåÖÂê´ÊûÑÂª∫Ê†áÁ≠æ
          if echo "$COMMIT_MSG" | grep -qE "\[build\]|\[ÊûÑÂª∫\]|--build"; then
            SHOULD_BUILD="true"
            echo "‚úÖ Build trigger found in commit message"

            # Ëß£ÊûêPostgreSQLÁâàÊú¨
            if echo "$COMMIT_MSG" | grep -qE "\[pg15\]|\[postgresql-15\]|--pg15"; then
              PG_VERSION="15"
              echo "üì¶ PostgreSQL 15 specified"
            elif echo "$COMMIT_MSG" | grep -qE "\[pg16\]|\[postgresql-16\]|--pg16"; then
              PG_VERSION="16"
              echo "üì¶ PostgreSQL 16 specified"
            elif echo "$COMMIT_MSG" | grep -qE "\[pgboth\]|\[postgresql-both\]|--pgboth|\[both\]"; then
              PG_VERSION="both"
              echo "üì¶ Both PostgreSQL versions specified"
            fi

            # Ê£ÄÊü•Âº∫Âà∂ÈáçÂª∫
            if echo "$COMMIT_MSG" | grep -qE "\[force\]|\[Âº∫Âà∂\]|--force|--no-cache"; then
              FORCE_REBUILD="true"
              echo "üî• Force rebuild enabled"
            fi

            # ÊèêÂèñÊ†áÁ≠æÂêéÁºÄ
            if echo "$COMMIT_MSG" | grep -qE "\[tag:.*\]"; then
              TAG_SUFFIX=$(echo "$COMMIT_MSG" | grep -oE "\[tag:[^]]+\]" | sed 's/\[tag:\([^]]*\)\]/\1/')
              echo "üè∑Ô∏è  Tag suffix: $TAG_SUFFIX"
            fi
          else
            echo "‚è≠Ô∏è  No build trigger found in commit message"
          fi

          echo "should_build=$SHOULD_BUILD" >> $GITHUB_OUTPUT
          echo "postgres_version=$PG_VERSION" >> $GITHUB_OUTPUT
          echo "force_rebuild=$FORCE_REBUILD" >> $GITHUB_OUTPUT
          echo "tag_suffix=$TAG_SUFFIX" >> $GITHUB_OUTPUT
        fi

  build-pg15:
    needs: parse-commit
    runs-on: ubuntu-latest
    if: ${{ needs.parse-commit.outputs.should_build == 'true' && (needs.parse-commit.outputs.postgres_version == '15' || needs.parse-commit.outputs.postgres_version == 'both') }}
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha
          type=raw,value=pg15-latest
          type=raw,value=pg15-{{date 'YYYYMMDD'}}
          type=raw,value=latest

    - name: Build and push PostgreSQL 15 Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: ${{ needs.parse-commit.outputs.force_rebuild == 'false' && 'type=gha' || '' }}
        cache-to: type=gha,mode=max

  build-pg16:
    needs: parse-commit
    runs-on: ubuntu-latest
    if: ${{ needs.parse-commit.outputs.should_build == 'true' && (needs.parse-commit.outputs.postgres_version == '16' || needs.parse-commit.outputs.postgres_version == 'both') }}
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha
          type=raw,value=pg16-latest
          type=raw,value=pg16-{{date 'YYYYMMDD'}}

    - name: Build and push PostgreSQL 16 Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          POSTGRES_VERSION=16
        cache-from: ${{ needs.parse-commit.outputs.force_rebuild == 'false' && 'type=gha' || '' }}
        cache-to: type=gha,mode=max

  security-scan:
    needs: [parse-commit, build-pg15, build-pg16]
    runs-on: ubuntu-latest
    if: always() && (needs.build-pg15.result == 'success' || needs.build-pg16.result == 'success')

    strategy:
      matrix:
        version:
          - ${{ needs.parse-commit.outputs.postgres_version == '15' && '15' || '' }}
          - ${{ needs.parse-commit.outputs.postgres_version == '16' && '16' || '' }}
          - ${{ needs.parse-commit.outputs.postgres_version == 'both' && '15' || '' }}
          - ${{ needs.parse-commit.outputs.postgres_version == 'both' && '16' || '' }}
        exclude:
          - version: ''

    steps:
    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pg${{ matrix.version }}-latest
        format: 'sarif'
        output: 'trivy-results-pg${{ matrix.version }}.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results-pg${{ matrix.version }}.sarif'

  test:
    needs: [parse-commit, build-pg15, build-pg16]
    runs-on: ubuntu-latest
    if: always() && (needs.build-pg15.result == 'success' || needs.build-pg16.result == 'success')

    strategy:
      matrix:
        version:
          - ${{ needs.parse-commit.outputs.postgres_version == '15' && '15' || '' }}
          - ${{ needs.parse-commit.outputs.postgres_version == '16' && '16' || '' }}
          - ${{ needs.parse-commit.outputs.postgres_version == 'both' && '15' || '' }}
          - ${{ needs.parse-commit.outputs.postgres_version == 'both' && '16' || '' }}
        exclude:
          - version: ''

    steps:
    - name: Test PostgreSQL ${{ matrix.version }} Docker image
      run: |
        # ÊãâÂèñÂàöÊûÑÂª∫ÁöÑÈïúÂÉè
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pg${{ matrix.version }}-latest

        # ÂêØÂä®ÂÆπÂô®
        docker run -d \
          --name test-postgres-${{ matrix.version }} \
          -e POSTGRES_PASSWORD=testpass \
          -e POSTGRES_DB=testdb \
          -p ${{ matrix.version == '15' && '5432' || '5433' }}:5432 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pg${{ matrix.version }}-latest

        # Á≠âÂæÖÂÆπÂô®ÂêØÂä®
        sleep 30

        # ÊµãËØïËøûÊé•
        docker exec test-postgres-${{ matrix.version }} psql -U postgres -d testdb -c "SELECT version();"

        # ÊµãËØïÊâ©Â±ï
        docker exec test-postgres-${{ matrix.version }} psql -U postgres -d testdb -c "CREATE EXTENSION IF NOT EXISTS postgis;"
        docker exec test-postgres-${{ matrix.version }} psql -U postgres -d testdb -c "CREATE EXTENSION IF NOT EXISTS vector;"
        docker exec test-postgres-${{ matrix.version }} psql -U postgres -d testdb -c "CREATE EXTENSION IF NOT EXISTS pg_cron;"

        # È™åËØÅÊâ©Â±ï
        docker exec test-postgres-${{ matrix.version }} psql -U postgres -d testdb -c "SELECT * FROM pg_extension;"

        # Ê∏ÖÁêÜ
        docker stop test-postgres-${{ matrix.version }}
        docker rm test-postgres-${{ matrix.version }}

  create-release:
    needs: [parse-commit, build-pg15, build-pg16, test]
    runs-on: ubuntu-latest
    if: always() && (needs.build-pg15.result == 'success' || needs.build-pg16.result == 'success') && needs.test.result == 'success'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
      with:
        tag_name: release-${{ github.sha }}
        release_name: Custom PostgreSQL Release ${{ github.sha }}
        body: |
          ## üêò Custom PostgreSQL Docker Images

          ### üöÄ Built Images:
          ${{ needs.parse-commit.outputs.postgres_version == '15' && format('- `{0}/{1}:pg15-latest`', env.REGISTRY, env.IMAGE_NAME) || '' }}
          ${{ needs.parse-commit.outputs.postgres_version == '16' && format('- `{0}/{1}:pg16-latest`', env.REGISTRY, env.IMAGE_NAME) || '' }}
          ${{ needs.parse-commit.outputs.postgres_version == 'both' && format('- `{0}/{1}:pg15-latest`\n- `{0}/{1}:pg16-latest`', env.REGISTRY, env.IMAGE_NAME, env.REGISTRY, env.IMAGE_NAME) || '' }}

          ### üì¶ Included Extensions:
          - PostGIS (Âú∞ÁêÜ‰ø°ÊÅØÁ≥ªÁªü)
          - pgvector (ÂêëÈáèÊï∞ÊçÆÂ∫ì/AI)
          - pg_cron (ÂÆöÊó∂‰ªªÂä°)
          - pg_partman (ÂàÜÂå∫ÁÆ°ÁêÜ)
          - pgjwt (JWTÂ§ÑÁêÜ)
          - TimescaleDB (Êó∂Èó¥Â∫èÂàó)
          - ‰ª•ÂèäÊõ¥Â§ö...

          ### üîß Usage:
          ```bash
          # PostgreSQL 15
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pg15-latest
          docker run -d --name my-postgres -e POSTGRES_PASSWORD=yourpassword -p 5432:5432 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pg15-latest

          # PostgreSQL 16
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pg16-latest
          docker run -d --name my-postgres -e POSTGRES_PASSWORD=yourpassword -p 5432:5432 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pg16-latest
          ```

          ### ‚öôÔ∏è Build Parameters:
          - PostgreSQL Version: ${{ needs.parse-commit.outputs.postgres_version }}
          - Force Rebuild: ${{ needs.parse-commit.outputs.force_rebuild }}
          - Tag Suffix: ${{ needs.parse-commit.outputs.tag_suffix || 'none' }}
          - Trigger: ${{ github.event_name == 'workflow_dispatch' && 'Manual' || 'Commit Message' }}
        draft: false
        prerelease: false
