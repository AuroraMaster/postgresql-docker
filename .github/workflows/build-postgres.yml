name: Build Custom PostgreSQL Docker Image

on:
  # 仅手动触发构建
  workflow_dispatch:
    inputs:
      postgres_version:
        description: 'PostgreSQL version to build'
        required: true
        default: '15'
        type: choice
        options:
          - '15'
          - '16'
          - 'both'
      tag_suffix:
        description: 'Additional tag suffix'
        required: false
        default: ''
      force_rebuild:
        description: 'Force rebuild without cache'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/postgres-custom

jobs:
  build-pg15:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.postgres_version == '15' || github.event.inputs.postgres_version == 'both' }}
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha
          type=raw,value=pg15-latest
          type=raw,value=pg15-{{date 'YYYYMMDD'}}
          type=raw,value=latest

    - name: Build and push PostgreSQL 15 Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: ${{ github.event.inputs.force_rebuild == 'false' && 'type=gha' || '' }}
        cache-to: type=gha,mode=max

  build-pg16:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.postgres_version == '16' || github.event.inputs.postgres_version == 'both' }}
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha
          type=raw,value=pg16-latest
          type=raw,value=pg16-{{date 'YYYYMMDD'}}

    - name: Build and push PostgreSQL 16 Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          POSTGRES_VERSION=16
        cache-from: ${{ github.event.inputs.force_rebuild == 'false' && 'type=gha' || '' }}
        cache-to: type=gha,mode=max

  security-scan:
    needs: [build-pg15, build-pg16]
    runs-on: ubuntu-latest
    if: always() && (needs.build-pg15.result == 'success' || needs.build-pg16.result == 'success')

    strategy:
      matrix:
        version:
          - ${{ github.event.inputs.postgres_version == '15' && '15' || '' }}
          - ${{ github.event.inputs.postgres_version == '16' && '16' || '' }}
          - ${{ github.event.inputs.postgres_version == 'both' && '15' || '' }}
          - ${{ github.event.inputs.postgres_version == 'both' && '16' || '' }}
        exclude:
          - version: ''

    steps:
    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pg${{ matrix.version }}-latest
        format: 'sarif'
        output: 'trivy-results-pg${{ matrix.version }}.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results-pg${{ matrix.version }}.sarif'

  test:
    needs: [build-pg15, build-pg16]
    runs-on: ubuntu-latest
    if: always() && (needs.build-pg15.result == 'success' || needs.build-pg16.result == 'success')

    strategy:
      matrix:
        version:
          - ${{ github.event.inputs.postgres_version == '15' && '15' || '' }}
          - ${{ github.event.inputs.postgres_version == '16' && '16' || '' }}
          - ${{ github.event.inputs.postgres_version == 'both' && '15' || '' }}
          - ${{ github.event.inputs.postgres_version == 'both' && '16' || '' }}
        exclude:
          - version: ''

    steps:
    - name: Test PostgreSQL ${{ matrix.version }} Docker image
      run: |
        # 拉取刚构建的镜像
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pg${{ matrix.version }}-latest

        # 启动容器
        docker run -d \
          --name test-postgres-${{ matrix.version }} \
          -e POSTGRES_PASSWORD=testpass \
          -e POSTGRES_DB=testdb \
          -p ${{ matrix.version == '15' && '5432' || '5433' }}:5432 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pg${{ matrix.version }}-latest

        # 等待容器启动
        sleep 30

        # 测试连接
        docker exec test-postgres-${{ matrix.version }} psql -U postgres -d testdb -c "SELECT version();"

        # 测试扩展
        docker exec test-postgres-${{ matrix.version }} psql -U postgres -d testdb -c "CREATE EXTENSION IF NOT EXISTS postgis;"
        docker exec test-postgres-${{ matrix.version }} psql -U postgres -d testdb -c "CREATE EXTENSION IF NOT EXISTS vector;"
        docker exec test-postgres-${{ matrix.version }} psql -U postgres -d testdb -c "CREATE EXTENSION IF NOT EXISTS pg_cron;"

        # 验证扩展
        docker exec test-postgres-${{ matrix.version }} psql -U postgres -d testdb -c "SELECT * FROM pg_extension;"

        # 清理
        docker stop test-postgres-${{ matrix.version }}
        docker rm test-postgres-${{ matrix.version }}

  create-release:
    needs: [build-pg15, build-pg16, test]
    runs-on: ubuntu-latest
    if: always() && (needs.build-pg15.result == 'success' || needs.build-pg16.result == 'success') && needs.test.result == 'success'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
      with:
        tag_name: release-${{ github.sha }}
        release_name: Custom PostgreSQL Release ${{ github.sha }}
        body: |
          ## 🐘 Custom PostgreSQL Docker Images

          ### 🚀 Built Images:
          ${{ github.event.inputs.postgres_version == '15' && format('- `{0}/{1}:pg15-latest`', env.REGISTRY, env.IMAGE_NAME) || '' }}
          ${{ github.event.inputs.postgres_version == '16' && format('- `{0}/{1}:pg16-latest`', env.REGISTRY, env.IMAGE_NAME) || '' }}
          ${{ github.event.inputs.postgres_version == 'both' && format('- `{0}/{1}:pg15-latest`\n- `{0}/{1}:pg16-latest`', env.REGISTRY, env.IMAGE_NAME, env.REGISTRY, env.IMAGE_NAME) || '' }}

          ### 📦 Included Extensions:
          - PostGIS (地理信息系统)
          - pgvector (向量数据库/AI)
          - pg_cron (定时任务)
          - pg_partman (分区管理)
          - pgjwt (JWT处理)
          - TimescaleDB (时间序列)
          - 以及更多...

          ### 🔧 Usage:
          ```bash
          # PostgreSQL 15
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pg15-latest
          docker run -d --name my-postgres -e POSTGRES_PASSWORD=yourpassword -p 5432:5432 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pg15-latest

          # PostgreSQL 16
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pg16-latest
          docker run -d --name my-postgres -e POSTGRES_PASSWORD=yourpassword -p 5432:5432 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pg16-latest
          ```

          ### ⚙️ Build Parameters:
          - PostgreSQL Version: ${{ github.event.inputs.postgres_version }}
          - Force Rebuild: ${{ github.event.inputs.force_rebuild }}
          - Tag Suffix: ${{ github.event.inputs.tag_suffix || 'none' }}
        draft: false
        prerelease: false
