version: '3.8'

# 从.env文件加载环境变量

services:
  # 主数据库服务
  postgres:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        POSTGRES_VERSION: ${POSTGRES_VERSION:-16}
        SKIP_GIT_EXTENSIONS: ${SKIP_GIT_EXTENSIONS:-false}
    image: ${POSTGRES_IMAGE_NAME:-custom-postgres}:${POSTGRES_IMAGE_TAG:-latest}
    container_name: ${COMPOSE_PROJECT_NAME:-pg-custom}-postgres
    restart: unless-stopped

    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"

    ports:
      - "${POSTGRES_PORT:-5432}:5432"

    volumes:
      # 数据持久化 - 使用命名卷避免权限问题
      - postgres_data:/var/lib/postgresql/data

      # 日志目录
      - postgres_logs:/var/log/postgresql

      # 备份目录（绑定挂载到主机）
      - ${BACKUP_PATH:-./backups}:/backups

      # 自定义脚本目录（只读）
      - ./scripts:/docker-entrypoint-initdb.d:ro

    # 健康检查
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

    # 资源限制 (生产环境)
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    profiles: ["default", "prod", "full"]

    networks:
      - pg_network

    labels:
      - "traefik.enable=false"
      - "project=${PROJECT_NAME}"

  # 开发环境PostgreSQL (轻量配置)
  postgres-dev:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        POSTGRES_VERSION: ${POSTGRES_VERSION:-16}
    image: ${POSTGRES_IMAGE_NAME:-custom-postgres}:dev
    container_name: ${COMPOSE_PROJECT_NAME:-pg-custom}-postgres-dev
    restart: unless-stopped
    profiles: ["dev"]

    environment:
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_password_123}

    ports:
      - "${POSTGRES_PORT:-5432}:5432"

    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ${BACKUP_PATH:-./backups}:/backups
      - ./scripts:/docker-entrypoint-initdb.d:ro

    # 开发环境健康检查 (更宽松的配置)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

    networks:
      - pg_dev_network

    labels:
      - "environment=development"
      - "project=${PROJECT_NAME}"

  # PostgreSQL 管理界面
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ${COMPOSE_PROJECT_NAME:-pg-custom}-pgadmin
    restart: unless-stopped
    profiles: ["admin", "full"]  # 可选服务，使用 profile 控制

    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
      PGLADMIN_LISTEN_PORT: 80

    ports:
      - "${PGADMIN_PORT:-8080}:80"

    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./config/pgadmin/servers.json:/pgadmin4/servers.json:ro

    depends_on:
      postgres:
        condition: service_healthy

    networks:
      - pg_network

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.localhost`)"
      - "project=${PROJECT_NAME}"

  # Redis 缓存服务
  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-pg-custom}-redis
    restart: unless-stopped
    profiles: ["cache", "full"]  # 可选服务

    command: >
      sh -c "
        redis-server
        --appendonly yes
        --requirepass ${REDIS_PASSWORD}
        --maxmemory 256mb
        --maxmemory-policy allkeys-lru
      "

    ports:
      - "${REDIS_PORT:-6379}:6379"

    volumes:
      - redis_data:/data

    # 健康检查
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

    networks:
      - pg_network

    labels:
      - "project=${PROJECT_NAME}"

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: ${COMPOSE_PROJECT_NAME:-pg-custom}-nginx
    restart: unless-stopped
    profiles: ["proxy", "full"]  # 可选服务

    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"

    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ${NGINX_LOGS_PATH:-./logs/nginx}:/var/log/nginx
      - ./ssl:/etc/nginx/ssl:ro

    depends_on:
      postgres:
        condition: service_healthy

    networks:
      - pg_network

    labels:
      - "project=${PROJECT_NAME}"

  # 监控服务 (可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: ${COMPOSE_PROJECT_NAME:-pg-custom}-prometheus
    restart: unless-stopped
    profiles: ["monitoring", "full"]  # 可选服务

    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"

    volumes:
      - ./config/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus

    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

    networks:
      - pg_network

    labels:
      - "project=${PROJECT_NAME}"

  # 可视化监控 (可选)
  grafana:
    image: grafana/grafana:latest
    container_name: ${COMPOSE_PROJECT_NAME:-pg-custom}-grafana
    restart: unless-stopped
    profiles: ["monitoring", "full"]  # 可选服务

    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${POSTGRES_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false

    ports:
      - "${GRAFANA_PORT:-3000}:3000"

    volumes:
      - grafana_data:/var/lib/grafana

    depends_on:
      - prometheus

    networks:
      - pg_network

    labels:
      - "project=${PROJECT_NAME}"

# ================================================================
# 数据卷定义
# ================================================================

volumes:
  # 生产环境数据卷
  postgres_data:
    driver: local
    labels:
      - "environment=production"
      - "backup=daily"

  postgres_logs:
    driver: local
    labels:
      - "type=logs"

  # 开发环境数据卷
  postgres_dev_data:
    driver: local
    labels:
      - "environment=development"
      - "backup=weekly"

  # 管理工具数据卷
  pgadmin_data:
    driver: local

  # 缓存和监控数据卷
  redis_data:
    driver: local

  prometheus_data:
    driver: local

  grafana_data:
    driver: local

# ================================================================
# 网络定义
# ================================================================

networks:
  # 生产网络
  pg_network:
    driver: bridge
    labels:
      - "environment=production"
    ipam:
      config:
        - subnet: 172.20.0.0/16

  # 开发网络
  pg_dev_network:
    driver: bridge
    labels:
      - "environment=development"
    ipam:
      config:
        - subnet: 172.21.0.0/16
